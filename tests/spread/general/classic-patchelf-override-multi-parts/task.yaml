summary: Build a classic multi parts snap and validates elf patching

systems:
  - -ubuntu-20.04
  - -ubuntu-20.04-64
  - -ubuntu-20.04-amd64
  - -ubuntu-20.04-arm64
  - -ubuntu-20.04-armhf
  - -ubuntu-20.04-s390x
  - -ubuntu-20.04-ppc64el

prepare: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  set_base "./snap/snapcraft.yaml"

  apt-get install patchelf dpkg-dev -y
  apt-mark auto patchelf dpkg-dev

restore: |
  cd snap
  snapcraft clean
  rm -f ./*.snap

  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  restore_yaml "snapcraft.yaml"

execute: |
  #shellcheck source=tests/spread/tools/snapcraft-yaml.sh
  . "$TOOLS_DIR/snapcraft-yaml.sh"
  base="$(get_base)"

  cd snap
  cat snapcraft.yaml
  snapcraft prime

  arch_triplet="$(dpkg-architecture -q DEB_HOST_MULTIARCH)"

  RPATH_ORIGIN_MATCH="^\\\$ORIGIN/../usr/lib/$arch_triplet:/snap/$base/current/lib/$arch_triplet"

  # Verify classic binary without patchelf.
  patchelf --print-interpreter prime/bin/hello | MATCH "^/lib.*/ld.*.so.*"
  patchelf --print-rpath prime/bin/hello | MATCH ""

  # Verify classic binary with patchelf.
  patchelf --print-interpreter prime/bin/hello2 | MATCH "^/snap/$base/current/lib.*/ld.*.so.*"
  patchelf --print-rpath prime/bin/hello2 | MATCH "${RPATH_ORIGIN_MATCH}"
